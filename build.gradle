
plugins {
    id 'org.springframework.boot' version '2.1.4.RELEASE'
    id 'java'
    id 'jacoco'
    id 'com.github.kt3k.coveralls' version '2.8.2'
}

apply plugin: 'idea'
apply plugin: 'eclipse'



ext {
    springBootVersion = "2.1.4.RELEASE"
    mybatisStarterVersion = '2.0.1'
    swaggerVersion = '2.9.2'
}


allprojects {
    group = 'io.github.alphajiang'
    version = '0.0.4-SNAPSHOT'
    apply plugin: 'java'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'jacoco'
    sourceCompatibility = JavaVersion.VERSION_1_10
    targetCompatibility = JavaVersion.VERSION_1_10

    compileJava {
        options.encoding = "UTF-8"
    }


    test.onlyIf { ! Boolean.getBoolean('skipTests') }

    repositories {
        maven { url 'http://maven.aliyun.com/mvn/repository/' }
        jcenter()
    }
    repositories {
        mavenCentral()
    }

//    dependencyManagement {
//        imports {
//            mavenBom "org.springframework.cloud:spring-cloud-dependencies:Greenwich.SR1"
//        }
//    }

}
//dependencies {
//    compile project(':hyena-core')
//
//}
bootJar {
    enabled = false
}
jar {
    enabled = false
}



subprojects {

    apply plugin: 'maven'
    apply plugin: 'signing'
    apply plugin: 'io.spring.dependency-management'


    task javadocJar(type: Jar) {
        classifier = 'javadoc'
        from javadoc
    }

    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    artifacts {
        archives javadocJar, sourcesJar
    }

    signing {
        // un-comment the line for release signing
        // sign configurations.archives
    }




    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }

                snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }

                pom.project {
                    name 'hyena'
                    packaging 'jar'
                    // optionally artifactId can be defined here
                    description 'Micro service for user score hosting. '
                    url 'https://github.com/alphajiang/hyena'

                    scm {
                        connection 'https://github.com/alphajiang/hyena.git'
                        developerConnection 'https://github.com/alphajiang/hyena.git'
                        url 'https://github.com/alphajiang/hyena.git'
                    }

                    licenses {
                        license {
                            name 'The Apache License, Version 2.0'
                            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }

                    developers {
                        developer {
                            id 'alphajiang'
                            name 'Alpha Jiang'
                            email 'alphajiang@163.com'
                        }
                    }
                }
            }
        }
    }

//    jacoco {
//        toolVersion = "0.8.3"
//        reportsDir = file("$buildDir/customJacocoReportDir")
//    }
//    jacocoTestReport {
//        reports {
//            xml.enabled true
//            xml.destination file("${buildDir}/reports/jacoco/report.xml")
//            html.enabled true
//            csv.enabled false
//        }
//    }
//    coveralls {
//        jacocoReportPath "${buildDir}/reports/jacoco/report.xml"
//    }

    dependencies {



        testCompile("org.springframework.boot:spring-boot-starter-test:${springBootVersion}")
        testCompile group: 'junit', name: 'junit', version: '4.12'
    }
}

// Only report code coverage for projects that are distributed
def publishedProjects = subprojects.findAll { it.path == ':hyena-core' }

task jacocoMerge(type: JacocoMerge) {
    publishedProjects.each { subproject ->
        executionData subproject.tasks.withType(Test)
    }
    doFirst {
        executionData = files(executionData.findAll { it.exists() })
    }
}

task jacocoRootReport(type: JacocoReport, group: 'Coverage reports') {
    description = 'Generates an aggregate report from all subprojects'
    dependsOn publishedProjects.test, jacocoMerge

    additionalSourceDirs = files(publishedProjects.sourceSets.main.allSource.srcDirs)
    sourceDirectories = files(publishedProjects.sourceSets.main.allSource.srcDirs)
    classDirectories = files(publishedProjects.sourceSets.main.output)
    executionData jacocoMerge.destinationFile

    reports {
        html.enabled = true // human readable
        xml.enabled = true // required by coveralls
    }
}

coveralls {
    sourceDirs = publishedProjects.sourceSets.main.allSource.srcDirs.flatten()
    jacocoReportPath = "${buildDir}/reports/jacoco/jacocoRootReport/jacocoRootReport.xml"
}

tasks.coveralls {
    group = 'Coverage reports'
    description = 'Uploads the aggregated coverage report to Coveralls'

    dependsOn jacocoRootReport
    onlyIf { System.env.'CI' && !JavaVersion.current().isJava9Compatible() }
}