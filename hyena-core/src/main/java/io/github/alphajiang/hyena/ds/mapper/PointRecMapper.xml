<!--
  ~  Copyright (C) 2019 Alpha Jiang. All rights reserved.
  ~
  ~  Licensed under the Apache License, Version 2.0 (the "License");
  ~  you may not use this file except in compliance with the License.
  ~  You may obtain a copy of the License at
  ~
  ~      http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~  Unless required by applicable law or agreed to in writing, software
  ~  distributed under the License is distributed on an "AS IS" BASIS,
  ~  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~  See the License for the specific language governing permissions and
  ~  limitations under the License.
  ~
  -->

<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="io.github.alphajiang.hyena.ds.mapper.PointRecMapper">


    <select id="getById" resultType="io.github.alphajiang.hyena.model.po.PointRecPo">
        select rec.* from `${pointTableName}_rec` as rec
        where rec.id = #{id}
        <if test="lock == true">
            for update
        </if>
    </select>

    <insert id="addPointRec" useGeneratedKeys="true" keyProperty="rec.id" keyColumn="id">
        insert into `${tableName}` set
        `pid` = #{rec.pid},
        `total` = #{rec.total},
        `available` = #{rec.available},
        <if test="rec.tag != null">
            `tag` = #{rec.tag},
        </if>
        <if test="rec.extra != null">
            `extra` = #{rec.extra},
        </if>
        `issueTime` = #{rec.issueTime},
        `expireTime` = #{rec.expireTime}
    </insert>


    <select id="listPointRec" resultType="io.github.alphajiang.hyena.model.dto.PointRec">
        select rec.*, p.uid as uid
        from `${pointTableName}_rec` as rec
        left join `${pointTableName}` as p on rec.pid = p.id
        where 1=1
        <if test="@io.github.alphajiang.hyena.utils.StringUtils@isNotBlank( param.uid )">
            and p.uid = #{param.uid}
        </if>
        <if test="@io.github.alphajiang.hyena.utils.StringUtils@isNotBlank( param.tag )">
            and rec.tag = #{param.tag}
        </if>
        <if test="param.available == true">
            and rec.available > 0
        </if>
        <choose>
            <when test="param.frozen != null and param.frozen == true">
                and rec.frozen > 0
            </when>
            <when test="param.frozen != null and param.frozen == false">
                and rec.frozen = 0
            </when>
        </choose>
        <if test="param.expireTime != null">
            and rec.expireTime &lt; #{param.expireTime}
        </if>

        <if test="param.enable != null">
            and rec.enable = #{param.enable}
        </if>
        <if test="@io.github.alphajiang.hyena.utils.StringUtils@isNotBlank( param.sk )">
            <bind name="pattern" value="'%' + sk + '%'"/>
            and (
            rec.tag like #{pattern}
            )
        </if>
        <if test="@io.github.alphajiang.hyena.utils.CollectionUtils@isNotEmpty( param.sorts )">
            <foreach item="sort" collection="param.sorts"
                     open="order by" separator="," close=" ">
                ${sort.columnsString} ${sort.order}
            </foreach>
        </if>
        <choose>
            <when test="param.start != null and param.size != null">
                limit #{param.start},#{param.size}
            </when>
            <when test="param.size != null">
                limit #{param.size}
            </when>
        </choose>
        <if test="param.lock == true">
            for update
        </if>
    </select>

    <select id="countPointRec" resultType="Long">
        select count(distinct rec.id)
        from `${pointTableName}_rec` as rec
        left join `${pointTableName}` as p on rec.pid = p.id
        where 1=1
        <if test="@io.github.alphajiang.hyena.utils.StringUtils@isNotBlank( param.uid )">
            and p.uid = #{param.uid}
        </if>
        <if test="@io.github.alphajiang.hyena.utils.StringUtils@isNotBlank( param.tag )">
            and rec.tag = #{param.tag}
        </if>
        <if test="param.available == true">
            and rec.available > 0
        </if>
        <choose>
            <when test="param.frozen != null and param.frozen == true">
                and rec.frozen > 0
            </when>
            <when test="param.frozen != null and param.frozen == false">
                and rec.frozen = 0
            </when>
        </choose>
        <if test="param.expireTime != null">
            and rec.expireTime &lt; #{param.expireTime}
        </if>

        <if test="param.enable != null">
            and rec.enable = #{param.enable}
        </if>
        <if test="@io.github.alphajiang.hyena.utils.StringUtils@isNotBlank( param.sk )">
            <bind name="pattern" value="'%' + sk + '%'"/>
            and (
            rec.tag like #{pattern}
            )
        </if>

    </select>


    <update id="updatePointRec" parameterType="io.github.alphajiang.hyena.model.po.PointRecPo">
        update `${pointTableName}_rec`
        set
        <if test="rec.available != null">
            available = #{rec.available},
        </if>
        <if test="rec.used != null">
            used = #{rec.used},
        </if>
        <if test="rec.frozen != null">
            frozen = #{rec.frozen},
        </if>
        <if test="rec.expire != null">
            expire = #{rec.expire},
        </if>
        <if test="rec.cancelled != null">
            cancelled = #{rec.cancelled},
        </if>
        <if test="rec.extra != null">
            extra = #{rec.extra},
        </if>
        <if test="rec.issueTime != null">
            issueTime = #{rec.issueTime},
        </if>
        <if test="rec.enable != null">
            `enable` = #{rec.enable},
        </if>
        updateTime = now()
        where id = #{rec.id}
    </update>


    <select id="getIncreasedPoint" resultType="java.lang.Long">
        select sum(rec.total)
        from `${pointTableName}_rec` as rec
        left join `${pointTableName}` as p on rec.pid = p.id
        where p.uid = #{uid}
        and rec.createTime between #{start} and #{end}
    </select>
</mapper>