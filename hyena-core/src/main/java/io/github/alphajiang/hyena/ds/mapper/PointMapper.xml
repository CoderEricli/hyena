<!--
  ~  Copyright (C) 2019 Alpha Jiang. All rights reserved.
  ~
  ~  Licensed under the Apache License, Version 2.0 (the "License");
  ~  you may not use this file except in compliance with the License.
  ~  You may obtain a copy of the License at
  ~
  ~      http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~  Unless required by applicable law or agreed to in writing, software
  ~  distributed under the License is distributed on an "AS IS" BASIS,
  ~  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~  See the License for the specific language governing permissions and
  ~  limitations under the License.
  ~
  -->

<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="io.github.alphajiang.hyena.ds.mapper.PointMapper">


    <resultMap id="pointVoMap" type="io.github.alphajiang.hyena.model.vo.PointVo">
        <result column="id" property="id"/>
        <result column="uid" property="uid"/>
        <result column="subUid" property="subUid"/>
        <result column="name" property="name"/>
        <result column="point" property="point"
                typeHandler="org.apache.ibatis.type.BigDecimalTypeHandler"/>
        <result column="available" property="available"
                typeHandler="org.apache.ibatis.type.BigDecimalTypeHandler"/>
        <result column="used" property="used"
                typeHandler="org.apache.ibatis.type.BigDecimalTypeHandler"/>
        <result column="frozen" property="frozen"
                typeHandler="org.apache.ibatis.type.BigDecimalTypeHandler"/>
        <result column="refund" property="refund"
                typeHandler="org.apache.ibatis.type.BigDecimalTypeHandler"/>
        <result column="expire" property="expire"
                typeHandler="org.apache.ibatis.type.BigDecimalTypeHandler"/>
        <result column="cost" property="cost"
                typeHandler="org.apache.ibatis.type.BigDecimalTypeHandler"/>
        <result column="frozenCost" property="frozenCost"
                typeHandler="org.apache.ibatis.type.BigDecimalTypeHandler"/>
        <result column="seqNum" property="seqNum"/>
        <result column="enable" property="enable"/>
        <result column="createTime" property="createTime"/>
        <result column="updateTime" property="updateTime"/>
        <collection property="recList"
                    ofType="io.github.alphajiang.hyena.model.po.PointRecPo">
            <result column="rec_id" property="id"/>
            <result column="rec_pid" property="pid"/>
            <result column="rec_seqNum" property="seqNum"/>
            <result column="rec_total" property="total"
                    typeHandler="org.apache.ibatis.type.BigDecimalTypeHandler"/>
            <result column="rec_available" property="available"
                    typeHandler="org.apache.ibatis.type.BigDecimalTypeHandler"/>
            <result column="rec_used" property="used"
                    typeHandler="org.apache.ibatis.type.BigDecimalTypeHandler"/>
            <result column="rec_frozen" property="frozen"
                    typeHandler="org.apache.ibatis.type.BigDecimalTypeHandler"/>
            <result column="rec_refund" property="refund"
                    typeHandler="org.apache.ibatis.type.BigDecimalTypeHandler"/>
            <result column="rec_cancelled" property="cancelled"
                    typeHandler="org.apache.ibatis.type.BigDecimalTypeHandler"/>
            <result column="rec_expire" property="expire"
                    typeHandler="org.apache.ibatis.type.BigDecimalTypeHandler"/>
            <result column="rec_totalCost" property="totalCost"
                    typeHandler="org.apache.ibatis.type.BigDecimalTypeHandler"/>
            <result column="rec_frozenCost" property="frozenCost"
                    typeHandler="org.apache.ibatis.type.BigDecimalTypeHandler"/>
            <result column="rec_usedCost" property="usedCost"
                    typeHandler="org.apache.ibatis.type.BigDecimalTypeHandler"/>
            <result column="rec_refundCost" property="refundCost"
                    typeHandler="org.apache.ibatis.type.BigDecimalTypeHandler"/>
            <result column="rec_tag" property="tag"/>
            <result column="rec_orderNo" property="orderNo"/>
            <result column="rec_sourceType" property="sourceType"/>
            <result column="rec_orderType" property="orderType"/>
            <result column="rec_payType" property="payType"/>
            <result column="rec_extra" property="extra"/>
            <result column="rec_issueTime" property="issueTime"/>
            <result column="rec_expireTime" property="expireTime"/>
            <result column="rec_enable" property="enable"/>
            <result column="rec_createTime" property="createTime"/>
            <result column="rec_updateTime" property="updateTime"/>

        </collection>
    </resultMap>

    <sql id="pointVoColumns">
        p.*,
        rec.id as rec_id,
        rec.pid as rec_pid,
        rec.seqNum as rec_seqNum,
        rec.total as rec_total,
        rec.available as rec_available,
        rec.used as rec_used,
        rec.frozen as rec_frozen,
        rec.refund as rec_refund,
        rec.cancelled as rec_cancelled,
        rec.expire as rec_expire,
        rec.totalCost as rec_totalCost,
        rec.frozenCost as rec_frozenCost,
        rec.usedCost as rec_usedCost,
        rec.refundCost as rec_refundCost,
        rec.orderNo as rec_orderNo,
        rec.tag as rec_tag,
        rec.issueTime as rec_issueTime,
        rec.sourceType as rec_sourceType,
        rec.orderType as rec_orderType,
        rec.payType as rec_payType,
        rec.extra as rec_extra,
        rec.expireTime as rec_expireTime,
        rec.enable as rec_enable,
        rec.createTime as rec_createTime,
        rec.updateTime as rec_updateTime
    </sql>

    <insert id="addPoint" useGeneratedKeys="true" keyProperty="point.id">
        insert into `${tableName}` (
        `uid`, `subUid`, `name`,
        `point`, `available`, `cost`,`frozen`,`used`,
        `refund`,`expire`,
        `frozenCost`,
        seqNum
        ) values(
        #{point.uid}, #{point.subUid}, #{point.name},
        #{point.point}, #{point.point}, #{point.cost},
        #{point.frozen}, #{point.used},
        #{point.refund}, #{point.expire},
        #{point.frozenCost},
        #{point.seqNum} )
    </insert>

    <select id="getCusPoint" resultType="io.github.alphajiang.hyena.model.po.PointPo">
        select cp.*
        from `${tableName}` as cp
        where cp.id = #{id}
        <if test="lock == true">
            for update
        </if>
    </select>

    <select id="getCusPointByUid" resultType="io.github.alphajiang.hyena.model.po.PointPo">
        select cp.*
        from `${tableName}` as cp
        where cp.uid = #{uid}
        <if test="subUid != null">
            and cp.subUid = #{subUid}
        </if>
    </select>

    <select id="listPoint" resultType="io.github.alphajiang.hyena.model.po.PointPo">
        select pt.*
        from `${pointTableName}` as pt
        where 1=1
        <if test="@io.github.alphajiang.hyena.utils.CollectionUtils@isNotEmpty( param.uidList )">
            and pt.uid in
            <foreach collection="param.uidList" open="(" close=")" item="uid" separator=",">
                #{uid}
            </foreach>
        </if>
        <if test="param.enable != null">
            and pt.enable = #{param.enable}
        </if>
        <if test="@io.github.alphajiang.hyena.utils.StringUtils@isNotBlank( param.sk )">
            <bind name="pattern" value="'%' + param.sk + '%'"/>
            and (
            pt.uid like #{pattern}
            or pt.`name` like #{pattern}
            )
        </if>
        <if test="@io.github.alphajiang.hyena.utils.CollectionUtils@isNotEmpty( param.sorts )">
            <foreach item="sort" collection="param.sorts"
                     open="order by" separator="," close=" ">
                ${sort.columnsString} ${sort.order}
            </foreach>
        </if>
        <choose>
            <when test="param.start != null and param.size != null">
                limit #{param.start},#{param.size}
            </when>
            <when test="param.size != null">
                limit #{param.size}
            </when>
        </choose>
        <if test="param.lock == true">
            for update
        </if>
    </select>

    <select id="countPoint" resultType="Long">
        select count(distinct pt.id)
        from `${pointTableName}` as pt
        where 1=1
        <if test="@io.github.alphajiang.hyena.utils.CollectionUtils@isNotEmpty( param.uidList )">
            and pt.uid in
            <foreach collection="param.uidList" open="(" close=")" item="uid" separator=",">
                #{uid}
            </foreach>
        </if>
        <if test="param.enable != null">
            and pt.enable = #{param.enable}
        </if>
        <if test="@io.github.alphajiang.hyena.utils.StringUtils@isNotBlank( param.sk )">
            <bind name="pattern" value="'%' + param.sk + '%'"/>
            and (
            pt.uid like #{pattern}
            or pt.`name` like #{pattern}
            )
        </if>
    </select>


    <select id="listExpirePoint" resultType="io.github.alphajiang.hyena.model.po.PointPo">
        select pt.*
        from `${pointTableName}` as pt
        left join `${pointTableName}_rec` as rec on rec.pid = pt.id
        where rec.expireTime &lt; now() and rec.enable = true
        group by pt.id
        <choose>
            <when test="param.start != null and param.size != null">
                limit #{param.start},#{param.size}
            </when>
            <when test="param.size != null">
                limit #{param.size}
            </when>
        </choose>
    </select>

    <update id="disableAccount">
        update `${tableName}`
        set `enable` = false
        where uid = #{uid}
        <if test="subUid != null">
            and subUid = #{subUid}
        </if>
        and `enable` = true
    </update>

    <update id="updateCusPoint">
        update `${tableName}`
        set seqNum = #{p.seqNum},
        <if test="p.name != null">
            `name` = #{p.name},
        </if>
        <if test="p.point != null">
            point = #{p.point},
        </if>
        <if test="p.available != null">
            available = #{p.available},
        </if>
        <if test="p.used != null">
            used = #{p.used},
        </if>
        <if test="p.frozen != null">
            frozen = #{p.frozen},
        </if>
        <if test="p.refund != null">
            refund = #{p.refund},
        </if>
        <if test="p.expire != null">
            expire = #{p.expire},
        </if>
        <if test="p.cost != null">
            cost = #{p.cost},
        </if>
        <if test="p.frozenCost != null">
            frozenCost = #{p.frozenCost},
        </if>
        <if test="p.enable != null">
            enable = #{p.enable},
        </if>
        updateTime = now()
        where id = #{p.id}
    </update>

    <update id="batchUpdate">
        <foreach collection="pointList" item="p" open="" close="" separator=";">
            update `${pointTableName}` set
            seqNum = #{p.seqNum},
            <if test="p.name != null">
                `name` = #{p.name},
            </if>
            <if test="p.point != null">
                point = #{p.point},
            </if>
            <if test="p.available != null">
                available = #{p.available},
            </if>
            <if test="p.used != null">
                used = #{p.used},
            </if>
            <if test="p.frozen != null">
                frozen = #{p.frozen},
            </if>
            <if test="p.refund != null">
                refund = #{p.refund},
            </if>
            <if test="p.expire != null">
                expire = #{p.expire},
            </if>
            <if test="p.cost != null">
                cost = #{p.cost},
            </if>
            <if test="p.frozenCost != null">
                frozenCost = #{p.frozenCost},
            </if>
            <if test="p.enable != null">
                enable = #{p.enable},
            </if>
            updateTime=now()
            where
            id = #{p.id}
        </foreach>
    </update>

    <select id="getPointVo" resultMap="pointVoMap">
        select
        <include refid="pointVoColumns"/>
        from `${pointTableName}` as p
        left join `${pointTableName}_rec` as rec on p.id = rec.pid and rec.enable = true
        where 1=1
        <if test="pid != null">
            and p.id = #{pid}
        </if>
        <if test="uid != null">
            and p.uid = #{uid}
        </if>
        <if test="subUid != null">
            and p.subUid = #{subUid}
        </if>
    </select>
</mapper>